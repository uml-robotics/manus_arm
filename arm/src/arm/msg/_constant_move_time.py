"""autogenerated by genpy from arm/constant_move_time.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import arm.msg
import genpy
import std_msgs.msg

class constant_move_time(genpy.Message):
  _md5sum = "ce3f840cc123698b1457e9ca4641494a"
  _type = "arm/constant_move_time"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """# Constant movement by time message
Header header
time end
constant_move move
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: arm/constant_move
# Constant movement message
Header header
int8[8] states
int8[7] speeds
bool query
bool quit
"""
  __slots__ = ['header','end','move']
  _slot_types = ['std_msgs/Header','time','arm/constant_move']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,end,move

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(constant_move_time, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.end is None:
        self.end = genpy.Time()
      if self.move is None:
        self.move = arm.msg.constant_move()
    else:
      self.header = std_msgs.msg.Header()
      self.end = genpy.Time()
      self.move = arm.msg.constant_move()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_5I.pack(_x.end.secs, _x.end.nsecs, _x.move.header.seq, _x.move.header.stamp.secs, _x.move.header.stamp.nsecs))
      _x = self.move.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_8b.pack(*self.move.states))
      buff.write(_struct_7b.pack(*self.move.speeds))
      _x = self
      buff.write(_struct_2B.pack(_x.move.query, _x.move.quit))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.end is None:
        self.end = genpy.Time()
      if self.move is None:
        self.move = arm.msg.constant_move()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 20
      (_x.end.secs, _x.end.nsecs, _x.move.header.seq, _x.move.header.stamp.secs, _x.move.header.stamp.nsecs,) = _struct_5I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.move.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.move.header.frame_id = str[start:end]
      start = end
      end += 8
      self.move.states = _struct_8b.unpack(str[start:end])
      start = end
      end += 7
      self.move.speeds = _struct_7b.unpack(str[start:end])
      _x = self
      start = end
      end += 2
      (_x.move.query, _x.move.quit,) = _struct_2B.unpack(str[start:end])
      self.move.query = bool(self.move.query)
      self.move.quit = bool(self.move.quit)
      self.end.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_5I.pack(_x.end.secs, _x.end.nsecs, _x.move.header.seq, _x.move.header.stamp.secs, _x.move.header.stamp.nsecs))
      _x = self.move.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(self.move.states.tostring())
      buff.write(self.move.speeds.tostring())
      _x = self
      buff.write(_struct_2B.pack(_x.move.query, _x.move.quit))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.end is None:
        self.end = genpy.Time()
      if self.move is None:
        self.move = arm.msg.constant_move()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 20
      (_x.end.secs, _x.end.nsecs, _x.move.header.seq, _x.move.header.stamp.secs, _x.move.header.stamp.nsecs,) = _struct_5I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.move.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.move.header.frame_id = str[start:end]
      start = end
      end += 8
      self.move.states = numpy.frombuffer(str[start:end], dtype=numpy.int8, count=8)
      start = end
      end += 7
      self.move.speeds = numpy.frombuffer(str[start:end], dtype=numpy.int8, count=7)
      _x = self
      start = end
      end += 2
      (_x.move.query, _x.move.quit,) = _struct_2B.unpack(str[start:end])
      self.move.query = bool(self.move.query)
      self.move.quit = bool(self.move.quit)
      self.end.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_8b = struct.Struct("<8b")
_struct_3I = struct.Struct("<3I")
_struct_5I = struct.Struct("<5I")
_struct_7b = struct.Struct("<7b")
_struct_2B = struct.Struct("<2B")
