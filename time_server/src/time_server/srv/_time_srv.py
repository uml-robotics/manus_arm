"""autogenerated by genpy from time_server/time_srvRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy

class time_srvRequest(genpy.Message):
  _md5sum = "db8caddc76616a835ffc8fba07846605"
  _type = "time_server/time_srvRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
time target

"""
  __slots__ = ['target']
  _slot_types = ['time']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       target

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(time_srvRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.target is None:
        self.target = genpy.Time()
    else:
      self.target = genpy.Time()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_2I.pack(_x.target.secs, _x.target.nsecs))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.target is None:
        self.target = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 8
      (_x.target.secs, _x.target.nsecs,) = _struct_2I.unpack(str[start:end])
      self.target.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_2I.pack(_x.target.secs, _x.target.nsecs))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.target is None:
        self.target = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 8
      (_x.target.secs, _x.target.nsecs,) = _struct_2I.unpack(str[start:end])
      self.target.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2I = struct.Struct("<2I")
"""autogenerated by genpy from time_server/time_srvResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy

class time_srvResponse(genpy.Message):
  _md5sum = "795c9cfc64532fd454a7bf03ae978496"
  _type = "time_server/time_srvResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """time actual
duration delta

"""
  __slots__ = ['actual','delta']
  _slot_types = ['time','duration']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       actual,delta

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(time_srvResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.actual is None:
        self.actual = genpy.Time()
      if self.delta is None:
        self.delta = genpy.Duration()
    else:
      self.actual = genpy.Time()
      self.delta = genpy.Duration()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_2I2i.pack(_x.actual.secs, _x.actual.nsecs, _x.delta.secs, _x.delta.nsecs))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.actual is None:
        self.actual = genpy.Time()
      if self.delta is None:
        self.delta = genpy.Duration()
      end = 0
      _x = self
      start = end
      end += 16
      (_x.actual.secs, _x.actual.nsecs, _x.delta.secs, _x.delta.nsecs,) = _struct_2I2i.unpack(str[start:end])
      self.actual.canon()
      self.delta.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_2I2i.pack(_x.actual.secs, _x.actual.nsecs, _x.delta.secs, _x.delta.nsecs))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.actual is None:
        self.actual = genpy.Time()
      if self.delta is None:
        self.delta = genpy.Duration()
      end = 0
      _x = self
      start = end
      end += 16
      (_x.actual.secs, _x.actual.nsecs, _x.delta.secs, _x.delta.nsecs,) = _struct_2I2i.unpack(str[start:end])
      self.actual.canon()
      self.delta.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2I2i = struct.Struct("<2I2i")
class time_srv(object):
  _type          = 'time_server/time_srv'
  _md5sum = '538088de2280801645bd68bcaa6d0173'
  _request_class  = time_srvRequest
  _response_class = time_srvResponse
